/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.ys.liferay.cert.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;

import com.ys.liferay.cert.model.Inventory;
import com.ys.liferay.cert.model.InventoryModel;
import com.ys.liferay.cert.model.InventorySoap;
import com.ys.liferay.cert.service.persistence.InventoryPK;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Inventory service. Represents a row in the &quot;LCert_Inventory&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.ys.liferay.cert.model.InventoryModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link InventoryImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see InventoryImpl
 * @see com.ys.liferay.cert.model.Inventory
 * @see com.ys.liferay.cert.model.InventoryModel
 * @generated
 */
@JSON(strict = true)
public class InventoryModelImpl extends BaseModelImpl<Inventory>
	implements InventoryModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a inventory model instance should use the {@link com.ys.liferay.cert.model.Inventory} interface instead.
	 */
	public static final String TABLE_NAME = "LCert_Inventory";
	public static final Object[][] TABLE_COLUMNS = {
			{ "productId", Types.BIGINT },
			{ "productName", Types.VARCHAR },
			{ "productCode", Types.BIGINT }
		};
	public static final String TABLE_SQL_CREATE = "create table LCert_Inventory (productId LONG not null,productName VARCHAR(75) null,productCode LONG not null,primary key (productId, productCode))";
	public static final String TABLE_SQL_DROP = "drop table LCert_Inventory";
	public static final String ORDER_BY_JPQL = " ORDER BY inventory.id.productId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY LCert_Inventory.productId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.ys.liferay.cert.model.Inventory"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.ys.liferay.cert.model.Inventory"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Inventory toModel(InventorySoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Inventory model = new InventoryImpl();

		model.setProductId(soapModel.getProductId());
		model.setProductName(soapModel.getProductName());
		model.setProductCode(soapModel.getProductCode());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Inventory> toModels(InventorySoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Inventory> models = new ArrayList<Inventory>(soapModels.length);

		for (InventorySoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.ys.liferay.cert.model.Inventory"));

	public InventoryModelImpl() {
	}

	public InventoryPK getPrimaryKey() {
		return new InventoryPK(_productId, _productCode);
	}

	public void setPrimaryKey(InventoryPK primaryKey) {
		setProductId(primaryKey.productId);
		setProductCode(primaryKey.productCode);
	}

	public Serializable getPrimaryKeyObj() {
		return new InventoryPK(_productId, _productCode);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((InventoryPK)primaryKeyObj);
	}

	public Class<?> getModelClass() {
		return Inventory.class;
	}

	public String getModelClassName() {
		return Inventory.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("productId", getProductId());
		attributes.put("productName", getProductName());
		attributes.put("productCode", getProductCode());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long productId = (Long)attributes.get("productId");

		if (productId != null) {
			setProductId(productId);
		}

		String productName = (String)attributes.get("productName");

		if (productName != null) {
			setProductName(productName);
		}

		Long productCode = (Long)attributes.get("productCode");

		if (productCode != null) {
			setProductCode(productCode);
		}
	}

	@JSON
	public long getProductId() {
		return _productId;
	}

	public void setProductId(long productId) {
		_productId = productId;
	}

	@JSON
	public String getProductName() {
		if (_productName == null) {
			return StringPool.BLANK;
		}
		else {
			return _productName;
		}
	}

	public void setProductName(String productName) {
		_productName = productName;
	}

	@JSON
	public long getProductCode() {
		return _productCode;
	}

	public void setProductCode(long productCode) {
		_productCode = productCode;
	}

	@Override
	public Inventory toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Inventory)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	public Inventory toUnescapedModel() {
		return (Inventory)this;
	}

	@Override
	public Object clone() {
		InventoryImpl inventoryImpl = new InventoryImpl();

		inventoryImpl.setProductId(getProductId());
		inventoryImpl.setProductName(getProductName());
		inventoryImpl.setProductCode(getProductCode());

		inventoryImpl.resetOriginalValues();

		return inventoryImpl;
	}

	public int compareTo(Inventory inventory) {
		int value = 0;

		if (getProductId() < inventory.getProductId()) {
			value = -1;
		}
		else if (getProductId() > inventory.getProductId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Inventory)) {
			return false;
		}

		Inventory inventory = (Inventory)obj;

		InventoryPK primaryKey = inventory.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<Inventory> toCacheModel() {
		InventoryCacheModel inventoryCacheModel = new InventoryCacheModel();

		inventoryCacheModel.productId = getProductId();

		inventoryCacheModel.productName = getProductName();

		String productName = inventoryCacheModel.productName;

		if ((productName != null) && (productName.length() == 0)) {
			inventoryCacheModel.productName = null;
		}

		inventoryCacheModel.productCode = getProductCode();

		return inventoryCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(7);

		sb.append("{productId=");
		sb.append(getProductId());
		sb.append(", productName=");
		sb.append(getProductName());
		sb.append(", productCode=");
		sb.append(getProductCode());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(13);

		sb.append("<model><model-name>");
		sb.append("com.ys.liferay.cert.model.Inventory");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>productId</column-name><column-value><![CDATA[");
		sb.append(getProductId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>productName</column-name><column-value><![CDATA[");
		sb.append(getProductName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>productCode</column-name><column-value><![CDATA[");
		sb.append(getProductCode());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Inventory.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			Inventory.class
		};
	private long _productId;
	private String _productName;
	private long _productCode;
	private Inventory _escapedModel;
}