/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.ys.cert.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.ys.cert.model.Cars;
import com.ys.cert.model.CarsModel;
import com.ys.cert.model.CarsSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Cars service. Represents a row in the &quot;Vehicle_Cars&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.ys.cert.model.CarsModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link CarsImpl}.
 * </p>
 *
 * @author AC70602
 * @see CarsImpl
 * @see com.ys.cert.model.Cars
 * @see com.ys.cert.model.CarsModel
 * @generated
 */
@JSON(strict = true)
public class CarsModelImpl extends BaseModelImpl<Cars> implements CarsModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a cars model instance should use the {@link com.ys.cert.model.Cars} interface instead.
	 */
	public static final String TABLE_NAME = "Vehicle_Cars";
	public static final Object[][] TABLE_COLUMNS = {
			{ "carId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "carName", Types.VARCHAR },
			{ "carModel", Types.VARCHAR },
			{ "carModelYear", Types.INTEGER },
			{ "carColor", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table Vehicle_Cars (carId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,carName VARCHAR(75) null,carModel VARCHAR(75) null,carModelYear INTEGER,carColor VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table Vehicle_Cars";
	public static final String ORDER_BY_JPQL = " ORDER BY cars.carName ASC";
	public static final String ORDER_BY_SQL = " ORDER BY Vehicle_Cars.carName ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.ys.cert.model.Cars"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.ys.cert.model.Cars"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.ys.cert.model.Cars"),
			true);
	public static long CARMODEL_COLUMN_BITMASK = 1L;
	public static long CARMODELYEAR_COLUMN_BITMASK = 2L;
	public static long CARNAME_COLUMN_BITMASK = 4L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Cars toModel(CarsSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Cars model = new CarsImpl();

		model.setCarId(soapModel.getCarId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setCarName(soapModel.getCarName());
		model.setCarModel(soapModel.getCarModel());
		model.setCarModelYear(soapModel.getCarModelYear());
		model.setCarColor(soapModel.getCarColor());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Cars> toModels(CarsSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Cars> models = new ArrayList<Cars>(soapModels.length);

		for (CarsSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.ys.cert.model.Cars"));

	public CarsModelImpl() {
	}

	public long getPrimaryKey() {
		return _carId;
	}

	public void setPrimaryKey(long primaryKey) {
		setCarId(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_carId);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	public Class<?> getModelClass() {
		return Cars.class;
	}

	public String getModelClassName() {
		return Cars.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("carId", getCarId());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("carName", getCarName());
		attributes.put("carModel", getCarModel());
		attributes.put("carModelYear", getCarModelYear());
		attributes.put("carColor", getCarColor());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long carId = (Long)attributes.get("carId");

		if (carId != null) {
			setCarId(carId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		String carName = (String)attributes.get("carName");

		if (carName != null) {
			setCarName(carName);
		}

		String carModel = (String)attributes.get("carModel");

		if (carModel != null) {
			setCarModel(carModel);
		}

		Integer carModelYear = (Integer)attributes.get("carModelYear");

		if (carModelYear != null) {
			setCarModelYear(carModelYear);
		}

		String carColor = (String)attributes.get("carColor");

		if (carColor != null) {
			setCarColor(carColor);
		}
	}

	@JSON
	public long getCarId() {
		return _carId;
	}

	public void setCarId(long carId) {
		_carId = carId;
	}

	@JSON
	public long getGroupId() {
		return _groupId;
	}

	public void setGroupId(long groupId) {
		_groupId = groupId;
	}

	@JSON
	public long getCompanyId() {
		return _companyId;
	}

	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@JSON
	public long getUserId() {
		return _userId;
	}

	public void setUserId(long userId) {
		_userId = userId;
	}

	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@JSON
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	public Date getCreateDate() {
		return _createDate;
	}

	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@JSON
	public String getCarName() {
		if (_carName == null) {
			return StringPool.BLANK;
		}
		else {
			return _carName;
		}
	}

	public void setCarName(String carName) {
		_columnBitmask = -1L;

		if (_originalCarName == null) {
			_originalCarName = _carName;
		}

		_carName = carName;
	}

	public String getOriginalCarName() {
		return GetterUtil.getString(_originalCarName);
	}

	@JSON
	public String getCarModel() {
		if (_carModel == null) {
			return StringPool.BLANK;
		}
		else {
			return _carModel;
		}
	}

	public void setCarModel(String carModel) {
		_columnBitmask |= CARMODEL_COLUMN_BITMASK;

		if (_originalCarModel == null) {
			_originalCarModel = _carModel;
		}

		_carModel = carModel;
	}

	public String getOriginalCarModel() {
		return GetterUtil.getString(_originalCarModel);
	}

	@JSON
	public int getCarModelYear() {
		return _carModelYear;
	}

	public void setCarModelYear(int carModelYear) {
		_columnBitmask |= CARMODELYEAR_COLUMN_BITMASK;

		if (!_setOriginalCarModelYear) {
			_setOriginalCarModelYear = true;

			_originalCarModelYear = _carModelYear;
		}

		_carModelYear = carModelYear;
	}

	public int getOriginalCarModelYear() {
		return _originalCarModelYear;
	}

	@JSON
	public String getCarColor() {
		if (_carColor == null) {
			return StringPool.BLANK;
		}
		else {
			return _carColor;
		}
	}

	public void setCarColor(String carColor) {
		_carColor = carColor;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			Cars.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Cars toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Cars)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	public Cars toUnescapedModel() {
		return (Cars)this;
	}

	@Override
	public Object clone() {
		CarsImpl carsImpl = new CarsImpl();

		carsImpl.setCarId(getCarId());
		carsImpl.setGroupId(getGroupId());
		carsImpl.setCompanyId(getCompanyId());
		carsImpl.setUserId(getUserId());
		carsImpl.setUserName(getUserName());
		carsImpl.setCreateDate(getCreateDate());
		carsImpl.setModifiedDate(getModifiedDate());
		carsImpl.setCarName(getCarName());
		carsImpl.setCarModel(getCarModel());
		carsImpl.setCarModelYear(getCarModelYear());
		carsImpl.setCarColor(getCarColor());

		carsImpl.resetOriginalValues();

		return carsImpl;
	}

	public int compareTo(Cars cars) {
		int value = 0;

		value = getCarName().compareTo(cars.getCarName());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Cars)) {
			return false;
		}

		Cars cars = (Cars)obj;

		long primaryKey = cars.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		CarsModelImpl carsModelImpl = this;

		carsModelImpl._originalCarName = carsModelImpl._carName;

		carsModelImpl._originalCarModel = carsModelImpl._carModel;

		carsModelImpl._originalCarModelYear = carsModelImpl._carModelYear;

		carsModelImpl._setOriginalCarModelYear = false;

		carsModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Cars> toCacheModel() {
		CarsCacheModel carsCacheModel = new CarsCacheModel();

		carsCacheModel.carId = getCarId();

		carsCacheModel.groupId = getGroupId();

		carsCacheModel.companyId = getCompanyId();

		carsCacheModel.userId = getUserId();

		carsCacheModel.userName = getUserName();

		String userName = carsCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			carsCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			carsCacheModel.createDate = createDate.getTime();
		}
		else {
			carsCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			carsCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			carsCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		carsCacheModel.carName = getCarName();

		String carName = carsCacheModel.carName;

		if ((carName != null) && (carName.length() == 0)) {
			carsCacheModel.carName = null;
		}

		carsCacheModel.carModel = getCarModel();

		String carModel = carsCacheModel.carModel;

		if ((carModel != null) && (carModel.length() == 0)) {
			carsCacheModel.carModel = null;
		}

		carsCacheModel.carModelYear = getCarModelYear();

		carsCacheModel.carColor = getCarColor();

		String carColor = carsCacheModel.carColor;

		if ((carColor != null) && (carColor.length() == 0)) {
			carsCacheModel.carColor = null;
		}

		return carsCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(23);

		sb.append("{carId=");
		sb.append(getCarId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", carName=");
		sb.append(getCarName());
		sb.append(", carModel=");
		sb.append(getCarModel());
		sb.append(", carModelYear=");
		sb.append(getCarModelYear());
		sb.append(", carColor=");
		sb.append(getCarColor());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(37);

		sb.append("<model><model-name>");
		sb.append("com.ys.cert.model.Cars");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>carId</column-name><column-value><![CDATA[");
		sb.append(getCarId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>carName</column-name><column-value><![CDATA[");
		sb.append(getCarName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>carModel</column-name><column-value><![CDATA[");
		sb.append(getCarModel());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>carModelYear</column-name><column-value><![CDATA[");
		sb.append(getCarModelYear());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>carColor</column-name><column-value><![CDATA[");
		sb.append(getCarColor());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Cars.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] { Cars.class };
	private long _carId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userUuid;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private String _carName;
	private String _originalCarName;
	private String _carModel;
	private String _originalCarModel;
	private int _carModelYear;
	private int _originalCarModelYear;
	private boolean _setOriginalCarModelYear;
	private String _carColor;
	private long _columnBitmask;
	private Cars _escapedModel;
}